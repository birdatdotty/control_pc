#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

#include "config.h"
#include "configure_context.h"
#include "create_context.h"
#include "verify_callback.h"


void init_openssl()
{ 
    SSL_load_error_strings();	
    OpenSSL_add_ssl_algorithms();
}

void cleanup_openssl()
{
    EVP_cleanup();
}


int main(int argc, char **argv)
{
    int sock;
    SSL_CTX *ctx;

    init_openssl();
    ctx = create_context();
OpenSSL_add_all_ciphers();
    configure_context(ctx);
//struct hostent *server = gethostbyname("127.0.0.1");
/*
SSL_CTX_set_verify_depth(ctx, VERIFY_DEPTH);
SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, //|SSL_VERIFY_FAIL_IF_NO_PEER_CERT,
                   verify_callback);
*/
SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER|SSL_VERIFY_FAIL_IF_NO_PEER_CERT, NULL);
SSL_CTX_load_verify_locations (ctx, "/etc/ssl/dotty.su/cacert.pem", NULL); //"/etc/ssl/certs");

struct sockaddr_in *serv_addr = (struct sockaddr_in*) calloc (1, sizeof (struct sockaddr_in));
serv_addr->sin_family = AF_INET;
//serv_addr->sin_addr.s_addr = inet_addr("127.0.0.1");
serv_addr->sin_addr.s_addr = htonl(INADDR_LOOPBACK);
serv_addr->sin_port = htons(PORT);
puts ("---");
SSL *ssl = SSL_new (ctx);
if (ssl == NULL)
  puts ("ssl == NULL");
//sock = 
int i_c = connect(sock,(struct sockaddr *) serv_addr,sizeof(serv_addr));
printf ("i_c = %i\n" ,i_c);
write (sock, "OK\n", 3);
SSL_set_fd(ssl, sock);
SSL_connect(ssl);
    //create_socket(PORT);

    /* Handle connections */
//    while(1) {
        struct sockaddr_in addr;
        uint len = sizeof(addr);
//        SSL *ssl;
        const char reply[] = "!!!test\n";
puts ("---");
//        int client = accept(sock, (struct sockaddr*)&addr, &len);
/*        if (client < 0) {
            perror("Unable to accept");
            exit(EXIT_FAILURE);
        }
*/
//        ssl = SSL_new(ctx);
//        SSL_set_fd(ssl, client);
//int verify_test = SSL_get_verify_result(ssl);
//printf ("verify_test = %i\n", verify_test);
/*        if (SSL_accept(ssl) <= 0) {
            ERR_print_errors_fp(stderr);
        }
        else {
            SSL_write(ssl, reply, strlen(reply));
        }*/
puts ("---------");
char buf[1024];
SSL_read (ssl, buf, 1024);
puts (buf);

        SSL_free(ssl);
        close(sock);
//    }

    close(sock);
    SSL_CTX_free(ctx);
    cleanup_openssl();
}

